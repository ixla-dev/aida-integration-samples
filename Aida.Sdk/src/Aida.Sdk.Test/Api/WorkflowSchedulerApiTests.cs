/*
 * aida
 *
 * 1.0.358
 *
 * The version of the OpenAPI document: 1.0.358
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Aida.Sdk.Client;
using Aida.Sdk.Api;
// uncomment below to import models
//using Aida.Sdk.Model;

namespace Aida.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing WorkflowSchedulerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WorkflowSchedulerApiTests : IDisposable
    {
        private WorkflowSchedulerApi instance;

        public WorkflowSchedulerApiTests()
        {
            instance = new WorkflowSchedulerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WorkflowSchedulerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WorkflowSchedulerApi
            //Assert.IsType<WorkflowSchedulerApi>(instance);
        }

        /// <summary>
        /// Test AidaV1WorkflowSchedulerJobsInfoPost
        /// </summary>
        [Fact]
        public void AidaV1WorkflowSchedulerJobsInfoPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int> requestBody = null;
            //var response = instance.AidaV1WorkflowSchedulerJobsInfoPost(requestBody);
            //Assert.IsType<List<Job>>(response);
        }

        /// <summary>
        /// Test CancelSuspendedWorkflows
        /// </summary>
        [Fact]
        public void CancelSuspendedWorkflowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CancelSuspendedWorkflows();
            //Assert.IsType<List<WorkflowInstanceSummaryModel>>(response);
        }

        /// <summary>
        /// Test CancelWorkflowInstance
        /// </summary>
        [Fact]
        public void CancelWorkflowInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CancelWorkflowInstance(id);
            //Assert.IsType<WorkflowBlueprintSummaryModel>(response);
        }

        /// <summary>
        /// Test DeleteWorkflowInstances
        /// </summary>
        [Fact]
        public void DeleteWorkflowInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DeleteWorkflowInstances();
            //Assert.IsType<List<WorkflowInstanceSummaryModel>>(response);
        }

        /// <summary>
        /// Test GetMetrics
        /// </summary>
        [Fact]
        public void GetMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMetrics();
            //Assert.IsType<RuntimeMetrics>(response);
        }

        /// <summary>
        /// Test GetQueuedJobs
        /// </summary>
        [Fact]
        public void GetQueuedJobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetQueuedJobs();
            //Assert.IsType<List<int>>(response);
        }

        /// <summary>
        /// Test GetRunningWorkflowIds
        /// </summary>
        [Fact]
        public void GetRunningWorkflowIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetRunningWorkflowIds();
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test GetRunningWorkflows
        /// </summary>
        [Fact]
        public void GetRunningWorkflowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetRunningWorkflows();
            //Assert.IsType<List<WorkflowInstanceSummaryModel>>(response);
        }

        /// <summary>
        /// Test GetSuspendedWorkflows
        /// </summary>
        [Fact]
        public void GetSuspendedWorkflowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSuspendedWorkflows();
            //Assert.IsType<List<WorkflowInstanceSummaryModel>>(response);
        }

        /// <summary>
        /// Test GetWorkflowInstances
        /// </summary>
        [Fact]
        public void GetWorkflowInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<WorkflowStatus> status = null;
            //int? page = null;
            //int? pageSize = null;
            //var response = instance.GetWorkflowInstances(status, page, pageSize);
            //Assert.IsType<WorkflowInstanceDtoPagedList>(response);
        }

        /// <summary>
        /// Test GetWorkflowRegistry
        /// </summary>
        [Fact]
        public void GetWorkflowRegistryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetWorkflowRegistry();
            //Assert.IsType<WorkflowBlueprintSummaryModelPagedList>(response);
        }

        /// <summary>
        /// Test GetWorkflowSchedulerState
        /// </summary>
        [Fact]
        public void GetWorkflowSchedulerStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetWorkflowSchedulerState();
            //Assert.IsType<WorkflowSchedulerStateDto>(response);
        }

        /// <summary>
        /// Test ListNamedLocks
        /// </summary>
        [Fact]
        public void ListNamedLocksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListNamedLocks();
            //Assert.IsType<List<Object>>(response);
        }

        /// <summary>
        /// Test ResumeWorkflowScheduler
        /// </summary>
        [Fact]
        public void ResumeWorkflowSchedulerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ResumeWorkflowScheduler();
            //Assert.IsType<List<CollectedWorkflow>>(response);
        }

        /// <summary>
        /// Test RunExperimentalWorkflow
        /// </summary>
        [Fact]
        public void RunExperimentalWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? cards = null;
            //instance.RunExperimentalWorkflow(cards);
        }

        /// <summary>
        /// Test RunTestWorkflow
        /// </summary>
        [Fact]
        public void RunTestWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? shouldFail = null;
            //var response = instance.RunTestWorkflow(shouldFail);
            //Assert.IsType<WorkflowInstanceSummaryModel>(response);
        }

        /// <summary>
        /// Test RunTransportTestWorkflow
        /// </summary>
        [Fact]
        public void RunTransportTestWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.RunTransportTestWorkflow();
        }

        /// <summary>
        /// Test RunWorkflow
        /// </summary>
        [Fact]
        public void RunWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowName = null;
            //string supportId = null;
            //string encoderSelectionStrategy = null;
            //string feederSelectionStrategy = null;
            //instance.RunWorkflow(workflowName, supportId, encoderSelectionStrategy, feederSelectionStrategy);
        }

        /// <summary>
        /// Test SignalExternalProcessCompleted
        /// </summary>
        [Fact]
        public void SignalExternalProcessCompletedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? waitForCompletion = null;
            //ExternalProcessCompletedMessage externalProcessCompletedMessage = null;
            //var response = instance.SignalExternalProcessCompleted(waitForCompletion, externalProcessCompletedMessage);
            //Assert.IsType<List<CollectedWorkflow>>(response);
        }

        /// <summary>
        /// Test StartWorkflowScheduler
        /// </summary>
        [Fact]
        public void StartWorkflowSchedulerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WorkflowSchedulerStartupParamsDto workflowSchedulerStartupParamsDto = null;
            //var response = instance.StartWorkflowScheduler(workflowSchedulerStartupParamsDto);
            //Assert.IsType<WorkflowSchedulerStateDto>(response);
        }

        /// <summary>
        /// Test StopWorkflowScheduler
        /// </summary>
        [Fact]
        public void StopWorkflowSchedulerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? stopAllRunningWorkflows = null;
            //JobErrorCodes? errorCode = null;
            //var response = instance.StopWorkflowScheduler(stopAllRunningWorkflows, errorCode);
            //Assert.IsType<WorkflowSchedulerStateDto>(response);
        }
    }
}
