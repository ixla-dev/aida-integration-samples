/*
 * aida
 *
 * 1.0.722-rc.3+496a5e11f6297a76e2b83a2b26e743e21a1c18c1
 *
 * The version of the OpenAPI document: 1.0.722-rc.3+496a5e11f6297a76e2b83a2b26e743e21a1c18c1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Aida.Sdk.Client;
using Aida.Sdk.Api;
// uncomment below to import models
//using Aida.Sdk.Model;

namespace Aida.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing ModbusApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ModbusApiTests : IDisposable
    {
        private ModbusApi instance;

        public ModbusApiTests()
        {
            instance = new ModbusApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ModbusApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ModbusApi
            //Assert.IsType<ModbusApi>(instance);
        }

        /// <summary>
        /// Test GetModbusClients
        /// </summary>
        [Fact]
        public void GetModbusClientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.GetModbusClients();
        }

        /// <summary>
        /// Test ReadAllRegisters
        /// </summary>
        [Fact]
        public void ReadAllRegistersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string slaveIdHex = null;
            //string port = null;
            //var response = instance.ReadAllRegisters(slaveIdHex, port);
            //Assert.IsType<List<int>>(response);
        }

        /// <summary>
        /// Test ReadFloat32Registers
        /// </summary>
        [Fact]
        public void ReadFloat32RegistersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string port = null;
            //ReadFieldRequest readFieldRequest = null;
            //var response = instance.ReadFloat32Registers(port, readFieldRequest);
            //Assert.IsType<float>(response);
        }

        /// <summary>
        /// Test ReadHoldingRegisters
        /// </summary>
        [Fact]
        public void ReadHoldingRegistersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string port = null;
            //ReadHoldingRegistersRequest readHoldingRegistersRequest = null;
            //instance.ReadHoldingRegisters(port, readHoldingRegistersRequest);
        }

        /// <summary>
        /// Test ReadInt16
        /// </summary>
        [Fact]
        public void ReadInt16Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string port = null;
            //ReadFieldRequest readFieldRequest = null;
            //var response = instance.ReadInt16(port, readFieldRequest);
            //Assert.IsType<int>(response);
        }

        /// <summary>
        /// Test ReadInt32
        /// </summary>
        [Fact]
        public void ReadInt32Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string port = null;
            //ReadFieldRequest readFieldRequest = null;
            //var response = instance.ReadInt32(port, readFieldRequest);
            //Assert.IsType<int>(response);
        }

        /// <summary>
        /// Test WriteFloat32
        /// </summary>
        [Fact]
        public void WriteFloat32Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string port = null;
            //WriteFloat32Request writeFloat32Request = null;
            //instance.WriteFloat32(port, writeFloat32Request);
        }

        /// <summary>
        /// Test WriteInt16
        /// </summary>
        [Fact]
        public void WriteInt16Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string port = null;
            //WriteInt16Request writeInt16Request = null;
            //instance.WriteInt16(port, writeInt16Request);
        }

        /// <summary>
        /// Test WriteInt32
        /// </summary>
        [Fact]
        public void WriteInt32Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string port = null;
            //WriteInt32Request writeInt32Request = null;
            //instance.WriteInt32(port, writeInt32Request);
        }

        /// <summary>
        /// Test WriteSingleRegister
        /// </summary>
        [Fact]
        public void WriteSingleRegisterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string port = null;
            //WriteUInt16Request writeUInt16Request = null;
            //instance.WriteSingleRegister(port, writeUInt16Request);
        }

        /// <summary>
        /// Test WriteString
        /// </summary>
        [Fact]
        public void WriteStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string port = null;
            //WriteMultipleRegistersRequest writeMultipleRegistersRequest = null;
            //instance.WriteString(port, writeMultipleRegistersRequest);
        }
    }
}
