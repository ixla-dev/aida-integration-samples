/*
 * aida
 *
 * 1.0.696
 *
 * The version of the OpenAPI document: 1.0.696
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// CleaningConfigurationDto
    /// </summary>
    [DataContract(Name = "CleaningConfigurationDto")]
    public partial class CleaningConfigurationDto : IEquatable<CleaningConfigurationDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CleaningConfigurationDto" /> class.
        /// </summary>
        /// <param name="normalPurgeDuration">normalPurgeDuration.</param>
        /// <param name="strongPurgeDuration">strongPurgeDuration.</param>
        /// <param name="wiperPassCount">wiperPassCount.</param>
        /// <param name="pumpSpeed">pumpSpeed.</param>
        /// <param name="mainSpittingCount">mainSpittingCount.</param>
        /// <param name="mainSpittingFreq">mainSpittingFreq.</param>
        /// <param name="mainSpittingCycles">mainSpittingCycles.</param>
        /// <param name="finalSpittingCount">finalSpittingCount.</param>
        /// <param name="finalSpittingFreq">finalSpittingFreq.</param>
        /// <param name="finalSpittingCycles">finalSpittingCycles.</param>
        /// <param name="inkPrimingTime">inkPrimingTime.</param>
        /// <param name="vacuumPressureSetPoint">vacuumPressureSetPoint.</param>
        /// <param name="spittingOffset">spittingOffset.</param>
        /// <param name="autoPark">autoPark.</param>
        /// <param name="autoClean">autoClean.</param>
        /// <param name="cleanAtStartup">cleanAtStartup.</param>
        /// <param name="cleanFrequency">cleanFrequency.</param>
        /// <param name="secondsOfSleepBeforeAutoPark">secondsOfSleepBeforeAutoPark.</param>
        public CleaningConfigurationDto(int normalPurgeDuration = default(int), int strongPurgeDuration = default(int), int wiperPassCount = default(int), int pumpSpeed = default(int), int mainSpittingCount = default(int), int mainSpittingFreq = default(int), int mainSpittingCycles = default(int), int finalSpittingCount = default(int), int finalSpittingFreq = default(int), int finalSpittingCycles = default(int), int inkPrimingTime = default(int), int vacuumPressureSetPoint = default(int), int spittingOffset = default(int), bool autoPark = default(bool), bool autoClean = default(bool), bool cleanAtStartup = default(bool), int cleanFrequency = default(int), int secondsOfSleepBeforeAutoPark = default(int))
        {
            this.NormalPurgeDuration = normalPurgeDuration;
            this.StrongPurgeDuration = strongPurgeDuration;
            this.WiperPassCount = wiperPassCount;
            this.PumpSpeed = pumpSpeed;
            this.MainSpittingCount = mainSpittingCount;
            this.MainSpittingFreq = mainSpittingFreq;
            this.MainSpittingCycles = mainSpittingCycles;
            this.FinalSpittingCount = finalSpittingCount;
            this.FinalSpittingFreq = finalSpittingFreq;
            this.FinalSpittingCycles = finalSpittingCycles;
            this.InkPrimingTime = inkPrimingTime;
            this.VacuumPressureSetPoint = vacuumPressureSetPoint;
            this.SpittingOffset = spittingOffset;
            this.AutoPark = autoPark;
            this.AutoClean = autoClean;
            this.CleanAtStartup = cleanAtStartup;
            this.CleanFrequency = cleanFrequency;
            this.SecondsOfSleepBeforeAutoPark = secondsOfSleepBeforeAutoPark;
        }

        /// <summary>
        /// Gets or Sets NormalPurgeDuration
        /// </summary>
        [DataMember(Name = "normalPurgeDuration", EmitDefaultValue = false)]
        public int NormalPurgeDuration { get; set; }

        /// <summary>
        /// Gets or Sets StrongPurgeDuration
        /// </summary>
        [DataMember(Name = "strongPurgeDuration", EmitDefaultValue = false)]
        public int StrongPurgeDuration { get; set; }

        /// <summary>
        /// Gets or Sets WiperPassCount
        /// </summary>
        [DataMember(Name = "wiperPassCount", EmitDefaultValue = false)]
        public int WiperPassCount { get; set; }

        /// <summary>
        /// Gets or Sets PumpSpeed
        /// </summary>
        [DataMember(Name = "pumpSpeed", EmitDefaultValue = false)]
        public int PumpSpeed { get; set; }

        /// <summary>
        /// Gets or Sets MainSpittingCount
        /// </summary>
        [DataMember(Name = "mainSpittingCount", EmitDefaultValue = false)]
        public int MainSpittingCount { get; set; }

        /// <summary>
        /// Gets or Sets MainSpittingFreq
        /// </summary>
        [DataMember(Name = "mainSpittingFreq", EmitDefaultValue = false)]
        public int MainSpittingFreq { get; set; }

        /// <summary>
        /// Gets or Sets MainSpittingCycles
        /// </summary>
        [DataMember(Name = "mainSpittingCycles", EmitDefaultValue = false)]
        public int MainSpittingCycles { get; set; }

        /// <summary>
        /// Gets or Sets FinalSpittingCount
        /// </summary>
        [DataMember(Name = "finalSpittingCount", EmitDefaultValue = false)]
        public int FinalSpittingCount { get; set; }

        /// <summary>
        /// Gets or Sets FinalSpittingFreq
        /// </summary>
        [DataMember(Name = "finalSpittingFreq", EmitDefaultValue = false)]
        public int FinalSpittingFreq { get; set; }

        /// <summary>
        /// Gets or Sets FinalSpittingCycles
        /// </summary>
        [DataMember(Name = "finalSpittingCycles", EmitDefaultValue = false)]
        public int FinalSpittingCycles { get; set; }

        /// <summary>
        /// Gets or Sets InkPrimingTime
        /// </summary>
        [DataMember(Name = "inkPrimingTime", EmitDefaultValue = false)]
        public int InkPrimingTime { get; set; }

        /// <summary>
        /// Gets or Sets VacuumPressureSetPoint
        /// </summary>
        [DataMember(Name = "vacuumPressureSetPoint", EmitDefaultValue = false)]
        public int VacuumPressureSetPoint { get; set; }

        /// <summary>
        /// Gets or Sets SpittingOffset
        /// </summary>
        [DataMember(Name = "spittingOffset", EmitDefaultValue = false)]
        public int SpittingOffset { get; set; }

        /// <summary>
        /// Gets or Sets AutoPark
        /// </summary>
        [DataMember(Name = "autoPark", EmitDefaultValue = true)]
        public bool AutoPark { get; set; }

        /// <summary>
        /// Gets or Sets AutoClean
        /// </summary>
        [DataMember(Name = "autoClean", EmitDefaultValue = true)]
        public bool AutoClean { get; set; }

        /// <summary>
        /// Gets or Sets CleanAtStartup
        /// </summary>
        [DataMember(Name = "cleanAtStartup", EmitDefaultValue = true)]
        public bool CleanAtStartup { get; set; }

        /// <summary>
        /// Gets or Sets CleanFrequency
        /// </summary>
        [DataMember(Name = "cleanFrequency", EmitDefaultValue = false)]
        public int CleanFrequency { get; set; }

        /// <summary>
        /// Gets or Sets SecondsOfSleepBeforeAutoPark
        /// </summary>
        [DataMember(Name = "secondsOfSleepBeforeAutoPark", EmitDefaultValue = false)]
        public int SecondsOfSleepBeforeAutoPark { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CleaningConfigurationDto {\n");
            sb.Append("  NormalPurgeDuration: ").Append(NormalPurgeDuration).Append("\n");
            sb.Append("  StrongPurgeDuration: ").Append(StrongPurgeDuration).Append("\n");
            sb.Append("  WiperPassCount: ").Append(WiperPassCount).Append("\n");
            sb.Append("  PumpSpeed: ").Append(PumpSpeed).Append("\n");
            sb.Append("  MainSpittingCount: ").Append(MainSpittingCount).Append("\n");
            sb.Append("  MainSpittingFreq: ").Append(MainSpittingFreq).Append("\n");
            sb.Append("  MainSpittingCycles: ").Append(MainSpittingCycles).Append("\n");
            sb.Append("  FinalSpittingCount: ").Append(FinalSpittingCount).Append("\n");
            sb.Append("  FinalSpittingFreq: ").Append(FinalSpittingFreq).Append("\n");
            sb.Append("  FinalSpittingCycles: ").Append(FinalSpittingCycles).Append("\n");
            sb.Append("  InkPrimingTime: ").Append(InkPrimingTime).Append("\n");
            sb.Append("  VacuumPressureSetPoint: ").Append(VacuumPressureSetPoint).Append("\n");
            sb.Append("  SpittingOffset: ").Append(SpittingOffset).Append("\n");
            sb.Append("  AutoPark: ").Append(AutoPark).Append("\n");
            sb.Append("  AutoClean: ").Append(AutoClean).Append("\n");
            sb.Append("  CleanAtStartup: ").Append(CleanAtStartup).Append("\n");
            sb.Append("  CleanFrequency: ").Append(CleanFrequency).Append("\n");
            sb.Append("  SecondsOfSleepBeforeAutoPark: ").Append(SecondsOfSleepBeforeAutoPark).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CleaningConfigurationDto);
        }

        /// <summary>
        /// Returns true if CleaningConfigurationDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CleaningConfigurationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CleaningConfigurationDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NormalPurgeDuration == input.NormalPurgeDuration ||
                    this.NormalPurgeDuration.Equals(input.NormalPurgeDuration)
                ) && 
                (
                    this.StrongPurgeDuration == input.StrongPurgeDuration ||
                    this.StrongPurgeDuration.Equals(input.StrongPurgeDuration)
                ) && 
                (
                    this.WiperPassCount == input.WiperPassCount ||
                    this.WiperPassCount.Equals(input.WiperPassCount)
                ) && 
                (
                    this.PumpSpeed == input.PumpSpeed ||
                    this.PumpSpeed.Equals(input.PumpSpeed)
                ) && 
                (
                    this.MainSpittingCount == input.MainSpittingCount ||
                    this.MainSpittingCount.Equals(input.MainSpittingCount)
                ) && 
                (
                    this.MainSpittingFreq == input.MainSpittingFreq ||
                    this.MainSpittingFreq.Equals(input.MainSpittingFreq)
                ) && 
                (
                    this.MainSpittingCycles == input.MainSpittingCycles ||
                    this.MainSpittingCycles.Equals(input.MainSpittingCycles)
                ) && 
                (
                    this.FinalSpittingCount == input.FinalSpittingCount ||
                    this.FinalSpittingCount.Equals(input.FinalSpittingCount)
                ) && 
                (
                    this.FinalSpittingFreq == input.FinalSpittingFreq ||
                    this.FinalSpittingFreq.Equals(input.FinalSpittingFreq)
                ) && 
                (
                    this.FinalSpittingCycles == input.FinalSpittingCycles ||
                    this.FinalSpittingCycles.Equals(input.FinalSpittingCycles)
                ) && 
                (
                    this.InkPrimingTime == input.InkPrimingTime ||
                    this.InkPrimingTime.Equals(input.InkPrimingTime)
                ) && 
                (
                    this.VacuumPressureSetPoint == input.VacuumPressureSetPoint ||
                    this.VacuumPressureSetPoint.Equals(input.VacuumPressureSetPoint)
                ) && 
                (
                    this.SpittingOffset == input.SpittingOffset ||
                    this.SpittingOffset.Equals(input.SpittingOffset)
                ) && 
                (
                    this.AutoPark == input.AutoPark ||
                    this.AutoPark.Equals(input.AutoPark)
                ) && 
                (
                    this.AutoClean == input.AutoClean ||
                    this.AutoClean.Equals(input.AutoClean)
                ) && 
                (
                    this.CleanAtStartup == input.CleanAtStartup ||
                    this.CleanAtStartup.Equals(input.CleanAtStartup)
                ) && 
                (
                    this.CleanFrequency == input.CleanFrequency ||
                    this.CleanFrequency.Equals(input.CleanFrequency)
                ) && 
                (
                    this.SecondsOfSleepBeforeAutoPark == input.SecondsOfSleepBeforeAutoPark ||
                    this.SecondsOfSleepBeforeAutoPark.Equals(input.SecondsOfSleepBeforeAutoPark)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.NormalPurgeDuration.GetHashCode();
                hashCode = (hashCode * 59) + this.StrongPurgeDuration.GetHashCode();
                hashCode = (hashCode * 59) + this.WiperPassCount.GetHashCode();
                hashCode = (hashCode * 59) + this.PumpSpeed.GetHashCode();
                hashCode = (hashCode * 59) + this.MainSpittingCount.GetHashCode();
                hashCode = (hashCode * 59) + this.MainSpittingFreq.GetHashCode();
                hashCode = (hashCode * 59) + this.MainSpittingCycles.GetHashCode();
                hashCode = (hashCode * 59) + this.FinalSpittingCount.GetHashCode();
                hashCode = (hashCode * 59) + this.FinalSpittingFreq.GetHashCode();
                hashCode = (hashCode * 59) + this.FinalSpittingCycles.GetHashCode();
                hashCode = (hashCode * 59) + this.InkPrimingTime.GetHashCode();
                hashCode = (hashCode * 59) + this.VacuumPressureSetPoint.GetHashCode();
                hashCode = (hashCode * 59) + this.SpittingOffset.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoPark.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoClean.GetHashCode();
                hashCode = (hashCode * 59) + this.CleanAtStartup.GetHashCode();
                hashCode = (hashCode * 59) + this.CleanFrequency.GetHashCode();
                hashCode = (hashCode * 59) + this.SecondsOfSleepBeforeAutoPark.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
