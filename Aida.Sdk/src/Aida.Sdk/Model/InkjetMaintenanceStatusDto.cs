/*
 * aida
 *
 * 1.0.692
 *
 * The version of the OpenAPI document: 1.0.692
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// InkjetMaintenanceStatusDto
    /// </summary>
    [DataContract(Name = "InkjetMaintenanceStatusDto")]
    public partial class InkjetMaintenanceStatusDto : IEquatable<InkjetMaintenanceStatusDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TemperatureStatus
        /// </summary>
        [DataMember(Name = "temperatureStatus", EmitDefaultValue = false)]
        public TemperatureStatus? TemperatureStatus { get; set; }

        /// <summary>
        /// Gets or Sets CleanAtStartupStatus
        /// </summary>
        [DataMember(Name = "cleanAtStartupStatus", EmitDefaultValue = false)]
        public CleanAtStartupStatus? CleanAtStartupStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InkjetMaintenanceStatusDto" /> class.
        /// </summary>
        /// <param name="temperatureStatus">temperatureStatus.</param>
        /// <param name="cleanAtStartupStatus">cleanAtStartupStatus.</param>
        /// <param name="canPrint">canPrint.</param>
        /// <param name="cantPrintReason">cantPrintReason.</param>
        /// <param name="remainingPrintsBeforeCleaning">remainingPrintsBeforeCleaning.</param>
        /// <param name="remainingTimeBeforeAutoParking">remainingTimeBeforeAutoParking.</param>
        public InkjetMaintenanceStatusDto(TemperatureStatus? temperatureStatus = default(TemperatureStatus?), CleanAtStartupStatus? cleanAtStartupStatus = default(CleanAtStartupStatus?), bool canPrint = default(bool), string cantPrintReason = default(string), int remainingPrintsBeforeCleaning = default(int), int remainingTimeBeforeAutoParking = default(int))
        {
            this.TemperatureStatus = temperatureStatus;
            this.CleanAtStartupStatus = cleanAtStartupStatus;
            this.CanPrint = canPrint;
            this.CantPrintReason = cantPrintReason;
            this.RemainingPrintsBeforeCleaning = remainingPrintsBeforeCleaning;
            this.RemainingTimeBeforeAutoParking = remainingTimeBeforeAutoParking;
        }

        /// <summary>
        /// Gets or Sets CanPrint
        /// </summary>
        [DataMember(Name = "canPrint", EmitDefaultValue = true)]
        public bool CanPrint { get; set; }

        /// <summary>
        /// Gets or Sets CantPrintReason
        /// </summary>
        [DataMember(Name = "cantPrintReason", EmitDefaultValue = true)]
        public string CantPrintReason { get; set; }

        /// <summary>
        /// Gets or Sets RemainingPrintsBeforeCleaning
        /// </summary>
        [DataMember(Name = "remainingPrintsBeforeCleaning", EmitDefaultValue = false)]
        public int RemainingPrintsBeforeCleaning { get; set; }

        /// <summary>
        /// Gets or Sets RemainingTimeBeforeAutoParking
        /// </summary>
        [DataMember(Name = "remainingTimeBeforeAutoParking", EmitDefaultValue = false)]
        public int RemainingTimeBeforeAutoParking { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InkjetMaintenanceStatusDto {\n");
            sb.Append("  TemperatureStatus: ").Append(TemperatureStatus).Append("\n");
            sb.Append("  CleanAtStartupStatus: ").Append(CleanAtStartupStatus).Append("\n");
            sb.Append("  CanPrint: ").Append(CanPrint).Append("\n");
            sb.Append("  CantPrintReason: ").Append(CantPrintReason).Append("\n");
            sb.Append("  RemainingPrintsBeforeCleaning: ").Append(RemainingPrintsBeforeCleaning).Append("\n");
            sb.Append("  RemainingTimeBeforeAutoParking: ").Append(RemainingTimeBeforeAutoParking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InkjetMaintenanceStatusDto);
        }

        /// <summary>
        /// Returns true if InkjetMaintenanceStatusDto instances are equal
        /// </summary>
        /// <param name="input">Instance of InkjetMaintenanceStatusDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InkjetMaintenanceStatusDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TemperatureStatus == input.TemperatureStatus ||
                    this.TemperatureStatus.Equals(input.TemperatureStatus)
                ) && 
                (
                    this.CleanAtStartupStatus == input.CleanAtStartupStatus ||
                    this.CleanAtStartupStatus.Equals(input.CleanAtStartupStatus)
                ) && 
                (
                    this.CanPrint == input.CanPrint ||
                    this.CanPrint.Equals(input.CanPrint)
                ) && 
                (
                    this.CantPrintReason == input.CantPrintReason ||
                    (this.CantPrintReason != null &&
                    this.CantPrintReason.Equals(input.CantPrintReason))
                ) && 
                (
                    this.RemainingPrintsBeforeCleaning == input.RemainingPrintsBeforeCleaning ||
                    this.RemainingPrintsBeforeCleaning.Equals(input.RemainingPrintsBeforeCleaning)
                ) && 
                (
                    this.RemainingTimeBeforeAutoParking == input.RemainingTimeBeforeAutoParking ||
                    this.RemainingTimeBeforeAutoParking.Equals(input.RemainingTimeBeforeAutoParking)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TemperatureStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.CleanAtStartupStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.CanPrint.GetHashCode();
                if (this.CantPrintReason != null)
                {
                    hashCode = (hashCode * 59) + this.CantPrintReason.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RemainingPrintsBeforeCleaning.GetHashCode();
                hashCode = (hashCode * 59) + this.RemainingTimeBeforeAutoParking.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
