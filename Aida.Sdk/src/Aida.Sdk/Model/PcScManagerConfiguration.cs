/*
 * aida
 *
 * 1.0.722-rc.3+496a5e11f6297a76e2b83a2b26e743e21a1c18c1
 *
 * The version of the OpenAPI document: 1.0.722-rc.3+496a5e11f6297a76e2b83a2b26e743e21a1c18c1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// PcScManagerConfiguration
    /// </summary>
    [DataContract(Name = "PcScManagerConfiguration")]
    public partial class PcScManagerConfiguration : IEquatable<PcScManagerConfiguration>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DefaultScope
        /// </summary>
        [DataMember(Name = "defaultScope", EmitDefaultValue = false)]
        public SCardScope? DefaultScope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PcScManagerConfiguration" /> class.
        /// </summary>
        /// <param name="defaultScope">defaultScope.</param>
        /// <param name="tracePcScCalls">tracePcScCalls.</param>
        /// <param name="logSensitiveData">logSensitiveData.</param>
        public PcScManagerConfiguration(SCardScope? defaultScope = default(SCardScope?), bool tracePcScCalls = default(bool), bool logSensitiveData = default(bool))
        {
            this.DefaultScope = defaultScope;
            this.TracePcScCalls = tracePcScCalls;
            this.LogSensitiveData = logSensitiveData;
        }

        /// <summary>
        /// Gets or Sets TracePcScCalls
        /// </summary>
        [DataMember(Name = "tracePcScCalls", EmitDefaultValue = true)]
        public bool TracePcScCalls { get; set; }

        /// <summary>
        /// Gets or Sets LogSensitiveData
        /// </summary>
        [DataMember(Name = "logSensitiveData", EmitDefaultValue = true)]
        public bool LogSensitiveData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PcScManagerConfiguration {\n");
            sb.Append("  DefaultScope: ").Append(DefaultScope).Append("\n");
            sb.Append("  TracePcScCalls: ").Append(TracePcScCalls).Append("\n");
            sb.Append("  LogSensitiveData: ").Append(LogSensitiveData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PcScManagerConfiguration);
        }

        /// <summary>
        /// Returns true if PcScManagerConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of PcScManagerConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PcScManagerConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DefaultScope == input.DefaultScope ||
                    this.DefaultScope.Equals(input.DefaultScope)
                ) && 
                (
                    this.TracePcScCalls == input.TracePcScCalls ||
                    this.TracePcScCalls.Equals(input.TracePcScCalls)
                ) && 
                (
                    this.LogSensitiveData == input.LogSensitiveData ||
                    this.LogSensitiveData.Equals(input.LogSensitiveData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DefaultScope.GetHashCode();
                hashCode = (hashCode * 59) + this.TracePcScCalls.GetHashCode();
                hashCode = (hashCode * 59) + this.LogSensitiveData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
