/*
 * aida
 *
 * 1.0.692
 *
 * The version of the OpenAPI document: 1.0.692
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// TemplateMatchingResult
    /// </summary>
    [DataContract(Name = "TemplateMatchingResult")]
    public partial class TemplateMatchingResult : IEquatable<TemplateMatchingResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateMatchingResult" /> class.
        /// </summary>
        /// <param name="best">best.</param>
        public TemplateMatchingResult(TemplateMatchOccurence best = default(TemplateMatchOccurence))
        {
            this.Best = best;
        }

        /// <summary>
        /// Gets or Sets Occurrences
        /// </summary>
        [DataMember(Name = "occurrences", EmitDefaultValue = true)]
        public List<TemplateMatchOccurence> Occurrences { get; private set; }

        /// <summary>
        /// Returns false as Occurrences should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOccurrences()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Any
        /// </summary>
        [DataMember(Name = "any", EmitDefaultValue = true)]
        public bool Any { get; private set; }

        /// <summary>
        /// Returns false as Any should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAny()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Best
        /// </summary>
        [DataMember(Name = "best", EmitDefaultValue = false)]
        public TemplateMatchOccurence Best { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplateMatchingResult {\n");
            sb.Append("  Occurrences: ").Append(Occurrences).Append("\n");
            sb.Append("  Any: ").Append(Any).Append("\n");
            sb.Append("  Best: ").Append(Best).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplateMatchingResult);
        }

        /// <summary>
        /// Returns true if TemplateMatchingResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateMatchingResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateMatchingResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Occurrences == input.Occurrences ||
                    this.Occurrences != null &&
                    input.Occurrences != null &&
                    this.Occurrences.SequenceEqual(input.Occurrences)
                ) && 
                (
                    this.Any == input.Any ||
                    this.Any.Equals(input.Any)
                ) && 
                (
                    this.Best == input.Best ||
                    (this.Best != null &&
                    this.Best.Equals(input.Best))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Occurrences != null)
                {
                    hashCode = (hashCode * 59) + this.Occurrences.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Any.GetHashCode();
                if (this.Best != null)
                {
                    hashCode = (hashCode * 59) + this.Best.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
