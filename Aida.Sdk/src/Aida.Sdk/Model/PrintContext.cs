/*
 * aida
 *
 * 1.0.722-rc.3+496a5e11f6297a76e2b83a2b26e743e21a1c18c1
 *
 * The version of the OpenAPI document: 1.0.722-rc.3+496a5e11f6297a76e2b83a2b26e743e21a1c18c1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// PrintContext
    /// </summary>
    [DataContract(Name = "PrintContext")]
    public partial class PrintContext : IEquatable<PrintContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintContext" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="printTasks">printTasks.</param>
        /// <param name="inkUsageInfo">inkUsageInfo.</param>
        public PrintContext(string id = default(string), List<PrintTask> printTasks = default(List<PrintTask>), Dictionary<string, long?> inkUsageInfo = default(Dictionary<string, long?>))
        {
            this.Id = id;
            this.PrintTasks = printTasks;
            this.InkUsageInfo = inkUsageInfo;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PrintTasks
        /// </summary>
        [DataMember(Name = "printTasks", EmitDefaultValue = true)]
        public List<PrintTask> PrintTasks { get; set; }

        /// <summary>
        /// Gets or Sets InkUsageInfo
        /// </summary>
        [DataMember(Name = "inkUsageInfo", EmitDefaultValue = true)]
        public Dictionary<string, long?> InkUsageInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrintContext {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PrintTasks: ").Append(PrintTasks).Append("\n");
            sb.Append("  InkUsageInfo: ").Append(InkUsageInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrintContext);
        }

        /// <summary>
        /// Returns true if PrintContext instances are equal
        /// </summary>
        /// <param name="input">Instance of PrintContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrintContext input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PrintTasks == input.PrintTasks ||
                    this.PrintTasks != null &&
                    input.PrintTasks != null &&
                    this.PrintTasks.SequenceEqual(input.PrintTasks)
                ) && 
                (
                    this.InkUsageInfo == input.InkUsageInfo ||
                    this.InkUsageInfo != null &&
                    input.InkUsageInfo != null &&
                    this.InkUsageInfo.SequenceEqual(input.InkUsageInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PrintTasks != null)
                {
                    hashCode = (hashCode * 59) + this.PrintTasks.GetHashCode();
                }
                if (this.InkUsageInfo != null)
                {
                    hashCode = (hashCode * 59) + this.InkUsageInfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
