/*
 * aida
 *
 * 1.0.691
 *
 * The version of the OpenAPI document: 1.0.691
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// LaserBoardConfig
    /// </summary>
    [DataContract(Name = "LaserBoardConfig")]
    public partial class LaserBoardConfig : IEquatable<LaserBoardConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LaserBoardConfig" /> class.
        /// </summary>
        /// <param name="boardType">boardType.</param>
        /// <param name="serialPortName">serialPortName.</param>
        /// <param name="slaveId">slaveId.</param>
        public LaserBoardConfig(string boardType = default(string), string serialPortName = default(string), int slaveId = default(int))
        {
            this.BoardType = boardType;
            this.SerialPortName = serialPortName;
            this.SlaveId = slaveId;
        }

        /// <summary>
        /// Gets or Sets BoardType
        /// </summary>
        [DataMember(Name = "boardType", EmitDefaultValue = true)]
        public string BoardType { get; set; }

        /// <summary>
        /// Gets or Sets SerialPortName
        /// </summary>
        [DataMember(Name = "serialPortName", EmitDefaultValue = true)]
        public string SerialPortName { get; set; }

        /// <summary>
        /// Gets or Sets SlaveId
        /// </summary>
        [DataMember(Name = "slaveId", EmitDefaultValue = false)]
        public int SlaveId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LaserBoardConfig {\n");
            sb.Append("  BoardType: ").Append(BoardType).Append("\n");
            sb.Append("  SerialPortName: ").Append(SerialPortName).Append("\n");
            sb.Append("  SlaveId: ").Append(SlaveId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LaserBoardConfig);
        }

        /// <summary>
        /// Returns true if LaserBoardConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of LaserBoardConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LaserBoardConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BoardType == input.BoardType ||
                    (this.BoardType != null &&
                    this.BoardType.Equals(input.BoardType))
                ) && 
                (
                    this.SerialPortName == input.SerialPortName ||
                    (this.SerialPortName != null &&
                    this.SerialPortName.Equals(input.SerialPortName))
                ) && 
                (
                    this.SlaveId == input.SlaveId ||
                    this.SlaveId.Equals(input.SlaveId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BoardType != null)
                {
                    hashCode = (hashCode * 59) + this.BoardType.GetHashCode();
                }
                if (this.SerialPortName != null)
                {
                    hashCode = (hashCode * 59) + this.SerialPortName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SlaveId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
