/*
 * aida
 *
 * 1.0.722-rc.3+496a5e11f6297a76e2b83a2b26e743e21a1c18c1
 *
 * The version of the OpenAPI document: 1.0.722-rc.3+496a5e11f6297a76e2b83a2b26e743e21a1c18c1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// CardOrientationCheckConfiguration
    /// </summary>
    [DataContract(Name = "CardOrientationCheckConfiguration")]
    public partial class CardOrientationCheckConfiguration : IEquatable<CardOrientationCheckConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardOrientationCheckConfiguration" /> class.
        /// </summary>
        /// <param name="jobTemplateId">jobTemplateId.</param>
        /// <param name="templateMatchingConfigurationId">templateMatchingConfigurationId.</param>
        /// <param name="threshold">threshold.</param>
        public CardOrientationCheckConfiguration(int jobTemplateId = default(int), int templateMatchingConfigurationId = default(int), float threshold = default(float))
        {
            this.JobTemplateId = jobTemplateId;
            this.TemplateMatchingConfigurationId = templateMatchingConfigurationId;
            this.Threshold = threshold;
        }

        /// <summary>
        /// Gets or Sets JobTemplateId
        /// </summary>
        [DataMember(Name = "jobTemplateId", EmitDefaultValue = false)]
        public int JobTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets TemplateMatchingConfigurationId
        /// </summary>
        [DataMember(Name = "templateMatchingConfigurationId", EmitDefaultValue = false)]
        public int TemplateMatchingConfigurationId { get; set; }

        /// <summary>
        /// Gets or Sets Threshold
        /// </summary>
        [DataMember(Name = "threshold", EmitDefaultValue = false)]
        public float Threshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardOrientationCheckConfiguration {\n");
            sb.Append("  JobTemplateId: ").Append(JobTemplateId).Append("\n");
            sb.Append("  TemplateMatchingConfigurationId: ").Append(TemplateMatchingConfigurationId).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardOrientationCheckConfiguration);
        }

        /// <summary>
        /// Returns true if CardOrientationCheckConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of CardOrientationCheckConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardOrientationCheckConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.JobTemplateId == input.JobTemplateId ||
                    this.JobTemplateId.Equals(input.JobTemplateId)
                ) && 
                (
                    this.TemplateMatchingConfigurationId == input.TemplateMatchingConfigurationId ||
                    this.TemplateMatchingConfigurationId.Equals(input.TemplateMatchingConfigurationId)
                ) && 
                (
                    this.Threshold == input.Threshold ||
                    this.Threshold.Equals(input.Threshold)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.JobTemplateId.GetHashCode();
                hashCode = (hashCode * 59) + this.TemplateMatchingConfigurationId.GetHashCode();
                hashCode = (hashCode * 59) + this.Threshold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
