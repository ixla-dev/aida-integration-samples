/*
 * aida
 *
 * 1.0.722-rc.3+496a5e11f6297a76e2b83a2b26e743e21a1c18c1
 *
 * The version of the OpenAPI document: 1.0.722-rc.3+496a5e11f6297a76e2b83a2b26e743e21a1c18c1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// WriteMultipleRegistersRequest
    /// </summary>
    [DataContract(Name = "WriteMultipleRegistersRequest")]
    public partial class WriteMultipleRegistersRequest : IEquatable<WriteMultipleRegistersRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WriteMultipleRegistersRequest" /> class.
        /// </summary>
        /// <param name="slaveId">slaveId.</param>
        /// <param name="address">address.</param>
        /// <param name="value">value.</param>
        public WriteMultipleRegistersRequest(int slaveId = default(int), int address = default(int), List<int> value = default(List<int>))
        {
            this.SlaveId = slaveId;
            this.Address = address;
            this.Value = value;
        }

        /// <summary>
        /// Gets or Sets SlaveId
        /// </summary>
        [DataMember(Name = "slaveId", EmitDefaultValue = false)]
        public int SlaveId { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public int Address { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public List<int> Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WriteMultipleRegistersRequest {\n");
            sb.Append("  SlaveId: ").Append(SlaveId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WriteMultipleRegistersRequest);
        }

        /// <summary>
        /// Returns true if WriteMultipleRegistersRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WriteMultipleRegistersRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WriteMultipleRegistersRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SlaveId == input.SlaveId ||
                    this.SlaveId.Equals(input.SlaveId)
                ) && 
                (
                    this.Address == input.Address ||
                    this.Address.Equals(input.Address)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value != null &&
                    input.Value != null &&
                    this.Value.SequenceEqual(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SlaveId.GetHashCode();
                hashCode = (hashCode * 59) + this.Address.GetHashCode();
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
