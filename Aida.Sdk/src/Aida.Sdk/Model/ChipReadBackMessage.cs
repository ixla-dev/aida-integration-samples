/*
 * aida
 *
 * 1.0.691
 *
 * The version of the OpenAPI document: 1.0.691
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// ChipReadBackMessage
    /// </summary>
    [DataContract(Name = "ChipReadBackMessage")]
    public partial class ChipReadBackMessage : IEquatable<ChipReadBackMessage>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name = "messageType", EmitDefaultValue = false)]
        public MessageType? MessageType { get; set; }

        /// <summary>
        /// Gets or Sets JobStatus
        /// </summary>
        [DataMember(Name = "jobStatus", EmitDefaultValue = false)]
        public JobStatus? JobStatus { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        public JobErrorCodes? ErrorCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChipReadBackMessage" /> class.
        /// </summary>
        /// <param name="sourceJobInstanceId">sourceJobInstanceId.</param>
        /// <param name="machineName">machineName.</param>
        /// <param name="machineSerial">machineSerial.</param>
        /// <param name="hostName">hostName.</param>
        /// <param name="jobId">jobId.</param>
        /// <param name="batchId">batchId.</param>
        /// <param name="correlationId">correlationId.</param>
        /// <param name="messageId">messageId.</param>
        /// <param name="workflowInstanceId">workflowInstanceId.</param>
        /// <param name="workflowInstanceName">workflowInstanceName.</param>
        /// <param name="messageType">messageType.</param>
        /// <param name="jobStatus">jobStatus.</param>
        /// <param name="errorCode">errorCode.</param>
        /// <param name="additionalMetadata">additionalMetadata.</param>
        /// <param name="documentProduced">documentProduced.</param>
        /// <param name="destructiveOperationExecuted">destructiveOperationExecuted.</param>
        /// <param name="discriminator">discriminator.</param>
        /// <param name="encoderIndex">encoderIndex.</param>
        /// <param name="encoderId">encoderId.</param>
        /// <param name="callbackUrl">callbackUrl.</param>
        public ChipReadBackMessage(string sourceJobInstanceId = default(string), string machineName = default(string), string machineSerial = default(string), string hostName = default(string), string jobId = default(string), string batchId = default(string), string correlationId = default(string), string messageId = default(string), string workflowInstanceId = default(string), string workflowInstanceName = default(string), MessageType? messageType = default(MessageType?), JobStatus? jobStatus = default(JobStatus?), JobErrorCodes? errorCode = default(JobErrorCodes?), Dictionary<string, Object> additionalMetadata = default(Dictionary<string, Object>), bool documentProduced = default(bool), bool destructiveOperationExecuted = default(bool), string discriminator = default(string), int encoderIndex = default(int), string encoderId = default(string), string callbackUrl = default(string))
        {
            this.SourceJobInstanceId = sourceJobInstanceId;
            this.MachineName = machineName;
            this.MachineSerial = machineSerial;
            this.HostName = hostName;
            this.JobId = jobId;
            this.BatchId = batchId;
            this.CorrelationId = correlationId;
            this.MessageId = messageId;
            this.WorkflowInstanceId = workflowInstanceId;
            this.WorkflowInstanceName = workflowInstanceName;
            this.MessageType = messageType;
            this.JobStatus = jobStatus;
            this.ErrorCode = errorCode;
            this.AdditionalMetadata = additionalMetadata;
            this.DocumentProduced = documentProduced;
            this.DestructiveOperationExecuted = destructiveOperationExecuted;
            this.Discriminator = discriminator;
            this.EncoderIndex = encoderIndex;
            this.EncoderId = encoderId;
            this.CallbackUrl = callbackUrl;
        }

        /// <summary>
        /// Gets or Sets SourceJobInstanceId
        /// </summary>
        [DataMember(Name = "sourceJobInstanceId", EmitDefaultValue = true)]
        public string SourceJobInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets MachineName
        /// </summary>
        [DataMember(Name = "machineName", EmitDefaultValue = true)]
        public string MachineName { get; set; }

        /// <summary>
        /// Gets or Sets MachineSerial
        /// </summary>
        [DataMember(Name = "machineSerial", EmitDefaultValue = true)]
        public string MachineSerial { get; set; }

        /// <summary>
        /// Gets or Sets HostName
        /// </summary>
        [DataMember(Name = "hostName", EmitDefaultValue = true)]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or Sets JobId
        /// </summary>
        [DataMember(Name = "jobId", EmitDefaultValue = true)]
        public string JobId { get; set; }

        /// <summary>
        /// Gets or Sets BatchId
        /// </summary>
        [DataMember(Name = "batchId", EmitDefaultValue = true)]
        public string BatchId { get; set; }

        /// <summary>
        /// Gets or Sets CorrelationId
        /// </summary>
        [DataMember(Name = "correlationId", EmitDefaultValue = true)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [DataMember(Name = "messageId", EmitDefaultValue = true)]
        public string MessageId { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowInstanceId
        /// </summary>
        [DataMember(Name = "workflowInstanceId", EmitDefaultValue = true)]
        public string WorkflowInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowInstanceName
        /// </summary>
        [DataMember(Name = "workflowInstanceName", EmitDefaultValue = true)]
        public string WorkflowInstanceName { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalMetadata
        /// </summary>
        [DataMember(Name = "additionalMetadata", EmitDefaultValue = true)]
        public Dictionary<string, Object> AdditionalMetadata { get; set; }

        /// <summary>
        /// Gets or Sets DocumentProduced
        /// </summary>
        [DataMember(Name = "documentProduced", EmitDefaultValue = true)]
        public bool DocumentProduced { get; set; }

        /// <summary>
        /// Gets or Sets DestructiveOperationExecuted
        /// </summary>
        [DataMember(Name = "destructiveOperationExecuted", EmitDefaultValue = true)]
        public bool DestructiveOperationExecuted { get; set; }

        /// <summary>
        /// Gets or Sets Discriminator
        /// </summary>
        [DataMember(Name = "discriminator", EmitDefaultValue = true)]
        public string Discriminator { get; set; }

        /// <summary>
        /// Gets or Sets EncoderIndex
        /// </summary>
        [DataMember(Name = "encoderIndex", EmitDefaultValue = false)]
        public int EncoderIndex { get; set; }

        /// <summary>
        /// Gets or Sets EncoderId
        /// </summary>
        [DataMember(Name = "encoderId", EmitDefaultValue = true)]
        public string EncoderId { get; set; }

        /// <summary>
        /// Gets or Sets CallbackUrl
        /// </summary>
        [DataMember(Name = "callbackUrl", EmitDefaultValue = true)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChipReadBackMessage {\n");
            sb.Append("  SourceJobInstanceId: ").Append(SourceJobInstanceId).Append("\n");
            sb.Append("  MachineName: ").Append(MachineName).Append("\n");
            sb.Append("  MachineSerial: ").Append(MachineSerial).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  WorkflowInstanceId: ").Append(WorkflowInstanceId).Append("\n");
            sb.Append("  WorkflowInstanceName: ").Append(WorkflowInstanceName).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  JobStatus: ").Append(JobStatus).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  AdditionalMetadata: ").Append(AdditionalMetadata).Append("\n");
            sb.Append("  DocumentProduced: ").Append(DocumentProduced).Append("\n");
            sb.Append("  DestructiveOperationExecuted: ").Append(DestructiveOperationExecuted).Append("\n");
            sb.Append("  Discriminator: ").Append(Discriminator).Append("\n");
            sb.Append("  EncoderIndex: ").Append(EncoderIndex).Append("\n");
            sb.Append("  EncoderId: ").Append(EncoderId).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChipReadBackMessage);
        }

        /// <summary>
        /// Returns true if ChipReadBackMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of ChipReadBackMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChipReadBackMessage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SourceJobInstanceId == input.SourceJobInstanceId ||
                    (this.SourceJobInstanceId != null &&
                    this.SourceJobInstanceId.Equals(input.SourceJobInstanceId))
                ) && 
                (
                    this.MachineName == input.MachineName ||
                    (this.MachineName != null &&
                    this.MachineName.Equals(input.MachineName))
                ) && 
                (
                    this.MachineSerial == input.MachineSerial ||
                    (this.MachineSerial != null &&
                    this.MachineSerial.Equals(input.MachineSerial))
                ) && 
                (
                    this.HostName == input.HostName ||
                    (this.HostName != null &&
                    this.HostName.Equals(input.HostName))
                ) && 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                ) && 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.MessageId == input.MessageId ||
                    (this.MessageId != null &&
                    this.MessageId.Equals(input.MessageId))
                ) && 
                (
                    this.WorkflowInstanceId == input.WorkflowInstanceId ||
                    (this.WorkflowInstanceId != null &&
                    this.WorkflowInstanceId.Equals(input.WorkflowInstanceId))
                ) && 
                (
                    this.WorkflowInstanceName == input.WorkflowInstanceName ||
                    (this.WorkflowInstanceName != null &&
                    this.WorkflowInstanceName.Equals(input.WorkflowInstanceName))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    this.MessageType.Equals(input.MessageType)
                ) && 
                (
                    this.JobStatus == input.JobStatus ||
                    this.JobStatus.Equals(input.JobStatus)
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    this.ErrorCode.Equals(input.ErrorCode)
                ) && 
                (
                    this.AdditionalMetadata == input.AdditionalMetadata ||
                    this.AdditionalMetadata != null &&
                    input.AdditionalMetadata != null &&
                    this.AdditionalMetadata.SequenceEqual(input.AdditionalMetadata)
                ) && 
                (
                    this.DocumentProduced == input.DocumentProduced ||
                    this.DocumentProduced.Equals(input.DocumentProduced)
                ) && 
                (
                    this.DestructiveOperationExecuted == input.DestructiveOperationExecuted ||
                    this.DestructiveOperationExecuted.Equals(input.DestructiveOperationExecuted)
                ) && 
                (
                    this.Discriminator == input.Discriminator ||
                    (this.Discriminator != null &&
                    this.Discriminator.Equals(input.Discriminator))
                ) && 
                (
                    this.EncoderIndex == input.EncoderIndex ||
                    this.EncoderIndex.Equals(input.EncoderIndex)
                ) && 
                (
                    this.EncoderId == input.EncoderId ||
                    (this.EncoderId != null &&
                    this.EncoderId.Equals(input.EncoderId))
                ) && 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceJobInstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceJobInstanceId.GetHashCode();
                }
                if (this.MachineName != null)
                {
                    hashCode = (hashCode * 59) + this.MachineName.GetHashCode();
                }
                if (this.MachineSerial != null)
                {
                    hashCode = (hashCode * 59) + this.MachineSerial.GetHashCode();
                }
                if (this.HostName != null)
                {
                    hashCode = (hashCode * 59) + this.HostName.GetHashCode();
                }
                if (this.JobId != null)
                {
                    hashCode = (hashCode * 59) + this.JobId.GetHashCode();
                }
                if (this.BatchId != null)
                {
                    hashCode = (hashCode * 59) + this.BatchId.GetHashCode();
                }
                if (this.CorrelationId != null)
                {
                    hashCode = (hashCode * 59) + this.CorrelationId.GetHashCode();
                }
                if (this.MessageId != null)
                {
                    hashCode = (hashCode * 59) + this.MessageId.GetHashCode();
                }
                if (this.WorkflowInstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.WorkflowInstanceId.GetHashCode();
                }
                if (this.WorkflowInstanceName != null)
                {
                    hashCode = (hashCode * 59) + this.WorkflowInstanceName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MessageType.GetHashCode();
                hashCode = (hashCode * 59) + this.JobStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                if (this.AdditionalMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalMetadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DocumentProduced.GetHashCode();
                hashCode = (hashCode * 59) + this.DestructiveOperationExecuted.GetHashCode();
                if (this.Discriminator != null)
                {
                    hashCode = (hashCode * 59) + this.Discriminator.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EncoderIndex.GetHashCode();
                if (this.EncoderId != null)
                {
                    hashCode = (hashCode * 59) + this.EncoderId.GetHashCode();
                }
                if (this.CallbackUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
