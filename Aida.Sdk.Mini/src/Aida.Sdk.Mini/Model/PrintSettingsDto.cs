/*
 * aida-mini
 *
 * 1.3.5+5a9fb622482f18d24fc4f1b5ae8fe290f7c62728
 *
 * The version of the OpenAPI document: 1.3.5+5a9fb622482f18d24fc4f1b5ae8fe290f7c62728
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Mini.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Mini.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Mini.Model
{
    /// <summary>
    /// PrintSettingsDto
    /// </summary>
    [DataContract(Name = "PrintSettingsDto")]
    public partial class PrintSettingsDto : IEquatable<PrintSettingsDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PrintQuality
        /// </summary>
        [DataMember(Name = "printQuality", EmitDefaultValue = false)]
        public PrintQuality? PrintQuality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintSettingsDto" /> class.
        /// </summary>
        /// <param name="printSpeed">printSpeed.</param>
        /// <param name="verticalMirrorEnabled">verticalMirrorEnabled.</param>
        /// <param name="horizontalMirrorEnabled">horizontalMirrorEnabled.</param>
        /// <param name="cmykDirectEnabled">cmykDirectEnabled.</param>
        /// <param name="enableC">enableC.</param>
        /// <param name="enableM">enableM.</param>
        /// <param name="enableY">enableY.</param>
        /// <param name="enableK">enableK.</param>
        /// <param name="dropSize">dropSize.</param>
        /// <param name="dataPageId">dataPageId.</param>
        /// <param name="printQuality">printQuality.</param>
        /// <param name="numberOfPrints">numberOfPrints.</param>
        /// <param name="printerColorProfileId">printerColorProfileId.</param>
        public PrintSettingsDto(int? printSpeed = default(int?), bool? verticalMirrorEnabled = default(bool?), bool? horizontalMirrorEnabled = default(bool?), bool? cmykDirectEnabled = default(bool?), bool? enableC = default(bool?), bool? enableM = default(bool?), bool? enableY = default(bool?), bool? enableK = default(bool?), int? dropSize = default(int?), int? dataPageId = default(int?), PrintQuality? printQuality = default(PrintQuality?), int? numberOfPrints = default(int?), string printerColorProfileId = default(string))
        {
            this.PrintSpeed = printSpeed;
            this.VerticalMirrorEnabled = verticalMirrorEnabled;
            this.HorizontalMirrorEnabled = horizontalMirrorEnabled;
            this.CmykDirectEnabled = cmykDirectEnabled;
            this.EnableC = enableC;
            this.EnableM = enableM;
            this.EnableY = enableY;
            this.EnableK = enableK;
            this.DropSize = dropSize;
            this.DataPageId = dataPageId;
            this.PrintQuality = printQuality;
            this.NumberOfPrints = numberOfPrints;
            this.PrinterColorProfileId = printerColorProfileId;
        }

        /// <summary>
        /// Gets or Sets PrintSpeed
        /// </summary>
        [DataMember(Name = "printSpeed", EmitDefaultValue = true)]
        public int? PrintSpeed { get; set; }

        /// <summary>
        /// Gets or Sets VerticalMirrorEnabled
        /// </summary>
        [DataMember(Name = "verticalMirrorEnabled", EmitDefaultValue = true)]
        public bool? VerticalMirrorEnabled { get; set; }

        /// <summary>
        /// Gets or Sets HorizontalMirrorEnabled
        /// </summary>
        [DataMember(Name = "horizontalMirrorEnabled", EmitDefaultValue = true)]
        public bool? HorizontalMirrorEnabled { get; set; }

        /// <summary>
        /// Gets or Sets CmykDirectEnabled
        /// </summary>
        [DataMember(Name = "cmykDirectEnabled", EmitDefaultValue = true)]
        public bool? CmykDirectEnabled { get; set; }

        /// <summary>
        /// Gets or Sets EnableC
        /// </summary>
        [DataMember(Name = "enableC", EmitDefaultValue = true)]
        public bool? EnableC { get; set; }

        /// <summary>
        /// Gets or Sets EnableM
        /// </summary>
        [DataMember(Name = "enableM", EmitDefaultValue = true)]
        public bool? EnableM { get; set; }

        /// <summary>
        /// Gets or Sets EnableY
        /// </summary>
        [DataMember(Name = "enableY", EmitDefaultValue = true)]
        public bool? EnableY { get; set; }

        /// <summary>
        /// Gets or Sets EnableK
        /// </summary>
        [DataMember(Name = "enableK", EmitDefaultValue = true)]
        public bool? EnableK { get; set; }

        /// <summary>
        /// Gets or Sets DropSize
        /// </summary>
        [DataMember(Name = "dropSize", EmitDefaultValue = true)]
        public int? DropSize { get; set; }

        /// <summary>
        /// Gets or Sets DataPageId
        /// </summary>
        [DataMember(Name = "dataPageId", EmitDefaultValue = true)]
        public int? DataPageId { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfPrints
        /// </summary>
        [DataMember(Name = "numberOfPrints", EmitDefaultValue = true)]
        public int? NumberOfPrints { get; set; }

        /// <summary>
        /// Gets or Sets PrinterColorProfileId
        /// </summary>
        [DataMember(Name = "printerColorProfileId", EmitDefaultValue = true)]
        public string PrinterColorProfileId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrintSettingsDto {\n");
            sb.Append("  PrintSpeed: ").Append(PrintSpeed).Append("\n");
            sb.Append("  VerticalMirrorEnabled: ").Append(VerticalMirrorEnabled).Append("\n");
            sb.Append("  HorizontalMirrorEnabled: ").Append(HorizontalMirrorEnabled).Append("\n");
            sb.Append("  CmykDirectEnabled: ").Append(CmykDirectEnabled).Append("\n");
            sb.Append("  EnableC: ").Append(EnableC).Append("\n");
            sb.Append("  EnableM: ").Append(EnableM).Append("\n");
            sb.Append("  EnableY: ").Append(EnableY).Append("\n");
            sb.Append("  EnableK: ").Append(EnableK).Append("\n");
            sb.Append("  DropSize: ").Append(DropSize).Append("\n");
            sb.Append("  DataPageId: ").Append(DataPageId).Append("\n");
            sb.Append("  PrintQuality: ").Append(PrintQuality).Append("\n");
            sb.Append("  NumberOfPrints: ").Append(NumberOfPrints).Append("\n");
            sb.Append("  PrinterColorProfileId: ").Append(PrinterColorProfileId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrintSettingsDto);
        }

        /// <summary>
        /// Returns true if PrintSettingsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PrintSettingsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrintSettingsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PrintSpeed == input.PrintSpeed ||
                    (this.PrintSpeed != null &&
                    this.PrintSpeed.Equals(input.PrintSpeed))
                ) && 
                (
                    this.VerticalMirrorEnabled == input.VerticalMirrorEnabled ||
                    (this.VerticalMirrorEnabled != null &&
                    this.VerticalMirrorEnabled.Equals(input.VerticalMirrorEnabled))
                ) && 
                (
                    this.HorizontalMirrorEnabled == input.HorizontalMirrorEnabled ||
                    (this.HorizontalMirrorEnabled != null &&
                    this.HorizontalMirrorEnabled.Equals(input.HorizontalMirrorEnabled))
                ) && 
                (
                    this.CmykDirectEnabled == input.CmykDirectEnabled ||
                    (this.CmykDirectEnabled != null &&
                    this.CmykDirectEnabled.Equals(input.CmykDirectEnabled))
                ) && 
                (
                    this.EnableC == input.EnableC ||
                    (this.EnableC != null &&
                    this.EnableC.Equals(input.EnableC))
                ) && 
                (
                    this.EnableM == input.EnableM ||
                    (this.EnableM != null &&
                    this.EnableM.Equals(input.EnableM))
                ) && 
                (
                    this.EnableY == input.EnableY ||
                    (this.EnableY != null &&
                    this.EnableY.Equals(input.EnableY))
                ) && 
                (
                    this.EnableK == input.EnableK ||
                    (this.EnableK != null &&
                    this.EnableK.Equals(input.EnableK))
                ) && 
                (
                    this.DropSize == input.DropSize ||
                    (this.DropSize != null &&
                    this.DropSize.Equals(input.DropSize))
                ) && 
                (
                    this.DataPageId == input.DataPageId ||
                    (this.DataPageId != null &&
                    this.DataPageId.Equals(input.DataPageId))
                ) && 
                (
                    this.PrintQuality == input.PrintQuality ||
                    this.PrintQuality.Equals(input.PrintQuality)
                ) && 
                (
                    this.NumberOfPrints == input.NumberOfPrints ||
                    (this.NumberOfPrints != null &&
                    this.NumberOfPrints.Equals(input.NumberOfPrints))
                ) && 
                (
                    this.PrinterColorProfileId == input.PrinterColorProfileId ||
                    (this.PrinterColorProfileId != null &&
                    this.PrinterColorProfileId.Equals(input.PrinterColorProfileId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrintSpeed != null)
                {
                    hashCode = (hashCode * 59) + this.PrintSpeed.GetHashCode();
                }
                if (this.VerticalMirrorEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.VerticalMirrorEnabled.GetHashCode();
                }
                if (this.HorizontalMirrorEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.HorizontalMirrorEnabled.GetHashCode();
                }
                if (this.CmykDirectEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.CmykDirectEnabled.GetHashCode();
                }
                if (this.EnableC != null)
                {
                    hashCode = (hashCode * 59) + this.EnableC.GetHashCode();
                }
                if (this.EnableM != null)
                {
                    hashCode = (hashCode * 59) + this.EnableM.GetHashCode();
                }
                if (this.EnableY != null)
                {
                    hashCode = (hashCode * 59) + this.EnableY.GetHashCode();
                }
                if (this.EnableK != null)
                {
                    hashCode = (hashCode * 59) + this.EnableK.GetHashCode();
                }
                if (this.DropSize != null)
                {
                    hashCode = (hashCode * 59) + this.DropSize.GetHashCode();
                }
                if (this.DataPageId != null)
                {
                    hashCode = (hashCode * 59) + this.DataPageId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PrintQuality.GetHashCode();
                if (this.NumberOfPrints != null)
                {
                    hashCode = (hashCode * 59) + this.NumberOfPrints.GetHashCode();
                }
                if (this.PrinterColorProfileId != null)
                {
                    hashCode = (hashCode * 59) + this.PrinterColorProfileId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
