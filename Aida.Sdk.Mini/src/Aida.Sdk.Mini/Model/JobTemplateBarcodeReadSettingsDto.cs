/*
 * aida-mini
 *
 * 1.3.5+5a9fb622482f18d24fc4f1b5ae8fe290f7c62728
 *
 * The version of the OpenAPI document: 1.3.5+5a9fb622482f18d24fc4f1b5ae8fe290f7c62728
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Mini.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Mini.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Mini.Model
{
    /// <summary>
    /// JobTemplateBarcodeReadSettingsDto
    /// </summary>
    [DataContract(Name = "JobTemplateBarcodeReadSettingsDto")]
    public partial class JobTemplateBarcodeReadSettingsDto : IEquatable<JobTemplateBarcodeReadSettingsDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SupportSide
        /// </summary>
        [DataMember(Name = "supportSide", EmitDefaultValue = false)]
        public SupportSide? SupportSide { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobTemplateBarcodeReadSettingsDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="jobTemplateId">jobTemplateId.</param>
        /// <param name="barcodeReadSettingsId">barcodeReadSettingsId.</param>
        /// <param name="supportSide">supportSide.</param>
        /// <param name="barcodeReadSettings">barcodeReadSettings.</param>
        public JobTemplateBarcodeReadSettingsDto(int id = default(int), string name = default(string), int jobTemplateId = default(int), int barcodeReadSettingsId = default(int), SupportSide? supportSide = default(SupportSide?), BarcodeReadSettingsDto barcodeReadSettings = default(BarcodeReadSettingsDto))
        {
            this.Id = id;
            this.Name = name;
            this.JobTemplateId = jobTemplateId;
            this.BarcodeReadSettingsId = barcodeReadSettingsId;
            this.SupportSide = supportSide;
            this.BarcodeReadSettings = barcodeReadSettings;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets JobTemplateId
        /// </summary>
        [DataMember(Name = "jobTemplateId", EmitDefaultValue = false)]
        public int JobTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets BarcodeReadSettingsId
        /// </summary>
        [DataMember(Name = "barcodeReadSettingsId", EmitDefaultValue = false)]
        public int BarcodeReadSettingsId { get; set; }

        /// <summary>
        /// Gets or Sets BarcodeReadSettings
        /// </summary>
        [DataMember(Name = "barcodeReadSettings", EmitDefaultValue = false)]
        public BarcodeReadSettingsDto BarcodeReadSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobTemplateBarcodeReadSettingsDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  JobTemplateId: ").Append(JobTemplateId).Append("\n");
            sb.Append("  BarcodeReadSettingsId: ").Append(BarcodeReadSettingsId).Append("\n");
            sb.Append("  SupportSide: ").Append(SupportSide).Append("\n");
            sb.Append("  BarcodeReadSettings: ").Append(BarcodeReadSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobTemplateBarcodeReadSettingsDto);
        }

        /// <summary>
        /// Returns true if JobTemplateBarcodeReadSettingsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of JobTemplateBarcodeReadSettingsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobTemplateBarcodeReadSettingsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.JobTemplateId == input.JobTemplateId ||
                    this.JobTemplateId.Equals(input.JobTemplateId)
                ) && 
                (
                    this.BarcodeReadSettingsId == input.BarcodeReadSettingsId ||
                    this.BarcodeReadSettingsId.Equals(input.BarcodeReadSettingsId)
                ) && 
                (
                    this.SupportSide == input.SupportSide ||
                    this.SupportSide.Equals(input.SupportSide)
                ) && 
                (
                    this.BarcodeReadSettings == input.BarcodeReadSettings ||
                    (this.BarcodeReadSettings != null &&
                    this.BarcodeReadSettings.Equals(input.BarcodeReadSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JobTemplateId.GetHashCode();
                hashCode = (hashCode * 59) + this.BarcodeReadSettingsId.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportSide.GetHashCode();
                if (this.BarcodeReadSettings != null)
                {
                    hashCode = (hashCode * 59) + this.BarcodeReadSettings.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
