/*
 * aida-mini
 *
 * 1.3.5+5a9fb622482f18d24fc4f1b5ae8fe290f7c62728
 *
 * The version of the OpenAPI document: 1.3.5+5a9fb622482f18d24fc4f1b5ae8fe290f7c62728
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Mini.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Mini.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Mini.Model
{
    /// <summary>
    /// MagneticReadBackConfigurationDtoAllOf
    /// </summary>
    [DataContract(Name = "MagneticReadBackConfigurationDto_allOf")]
    public partial class MagneticReadBackConfigurationDtoAllOf : IEquatable<MagneticReadBackConfigurationDtoAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MagneticReadBackConfigurationDtoAllOf" /> class.
        /// </summary>
        /// <param name="highCoercivity">highCoercivity.</param>
        /// <param name="readFromTrack1">readFromTrack1.</param>
        /// <param name="readFromTrack2">readFromTrack2.</param>
        /// <param name="readFromTrack3">readFromTrack3.</param>
        public MagneticReadBackConfigurationDtoAllOf(bool highCoercivity = default(bool), bool readFromTrack1 = default(bool), bool readFromTrack2 = default(bool), bool readFromTrack3 = default(bool))
        {
            this.HighCoercivity = highCoercivity;
            this.ReadFromTrack1 = readFromTrack1;
            this.ReadFromTrack2 = readFromTrack2;
            this.ReadFromTrack3 = readFromTrack3;
        }

        /// <summary>
        /// Gets or Sets HighCoercivity
        /// </summary>
        [DataMember(Name = "highCoercivity", EmitDefaultValue = true)]
        public bool HighCoercivity { get; set; }

        /// <summary>
        /// Gets or Sets ReadFromTrack1
        /// </summary>
        [DataMember(Name = "readFromTrack1", EmitDefaultValue = true)]
        public bool ReadFromTrack1 { get; set; }

        /// <summary>
        /// Gets or Sets ReadFromTrack2
        /// </summary>
        [DataMember(Name = "readFromTrack2", EmitDefaultValue = true)]
        public bool ReadFromTrack2 { get; set; }

        /// <summary>
        /// Gets or Sets ReadFromTrack3
        /// </summary>
        [DataMember(Name = "readFromTrack3", EmitDefaultValue = true)]
        public bool ReadFromTrack3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MagneticReadBackConfigurationDtoAllOf {\n");
            sb.Append("  HighCoercivity: ").Append(HighCoercivity).Append("\n");
            sb.Append("  ReadFromTrack1: ").Append(ReadFromTrack1).Append("\n");
            sb.Append("  ReadFromTrack2: ").Append(ReadFromTrack2).Append("\n");
            sb.Append("  ReadFromTrack3: ").Append(ReadFromTrack3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MagneticReadBackConfigurationDtoAllOf);
        }

        /// <summary>
        /// Returns true if MagneticReadBackConfigurationDtoAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of MagneticReadBackConfigurationDtoAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MagneticReadBackConfigurationDtoAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HighCoercivity == input.HighCoercivity ||
                    this.HighCoercivity.Equals(input.HighCoercivity)
                ) && 
                (
                    this.ReadFromTrack1 == input.ReadFromTrack1 ||
                    this.ReadFromTrack1.Equals(input.ReadFromTrack1)
                ) && 
                (
                    this.ReadFromTrack2 == input.ReadFromTrack2 ||
                    this.ReadFromTrack2.Equals(input.ReadFromTrack2)
                ) && 
                (
                    this.ReadFromTrack3 == input.ReadFromTrack3 ||
                    this.ReadFromTrack3.Equals(input.ReadFromTrack3)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.HighCoercivity.GetHashCode();
                hashCode = (hashCode * 59) + this.ReadFromTrack1.GetHashCode();
                hashCode = (hashCode * 59) + this.ReadFromTrack2.GetHashCode();
                hashCode = (hashCode * 59) + this.ReadFromTrack3.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
