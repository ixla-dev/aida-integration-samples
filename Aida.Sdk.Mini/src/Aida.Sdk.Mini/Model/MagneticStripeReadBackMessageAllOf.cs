/*
 * aida-mini
 *
 * 1.3.5-dev.2+010ffe2cb3fa5597fddacb6f4c0bef4aefc1e852
 *
 * The version of the OpenAPI document: 1.3.5-dev.2+010ffe2cb3fa5597fddacb6f4c0bef4aefc1e852
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Mini.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Mini.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Mini.Model
{
    /// <summary>
    /// MagneticStripeReadBackMessageAllOf
    /// </summary>
    [DataContract(Name = "MagneticStripeReadBackMessage_allOf")]
    public partial class MagneticStripeReadBackMessageAllOf : IEquatable<MagneticStripeReadBackMessageAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MagneticStripeReadBackMessageAllOf" /> class.
        /// </summary>
        /// <param name="track1Base64">track1Base64.</param>
        /// <param name="track2Base64">track2Base64.</param>
        /// <param name="track3Base64">track3Base64.</param>
        public MagneticStripeReadBackMessageAllOf(string track1Base64 = default(string), string track2Base64 = default(string), string track3Base64 = default(string))
        {
            this.Track1Base64 = track1Base64;
            this.Track2Base64 = track2Base64;
            this.Track3Base64 = track3Base64;
        }

        /// <summary>
        /// Gets or Sets Track1Base64
        /// </summary>
        [DataMember(Name = "track1Base64", EmitDefaultValue = true)]
        public string Track1Base64 { get; set; }

        /// <summary>
        /// Gets or Sets Track2Base64
        /// </summary>
        [DataMember(Name = "track2Base64", EmitDefaultValue = true)]
        public string Track2Base64 { get; set; }

        /// <summary>
        /// Gets or Sets Track3Base64
        /// </summary>
        [DataMember(Name = "track3Base64", EmitDefaultValue = true)]
        public string Track3Base64 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MagneticStripeReadBackMessageAllOf {\n");
            sb.Append("  Track1Base64: ").Append(Track1Base64).Append("\n");
            sb.Append("  Track2Base64: ").Append(Track2Base64).Append("\n");
            sb.Append("  Track3Base64: ").Append(Track3Base64).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MagneticStripeReadBackMessageAllOf);
        }

        /// <summary>
        /// Returns true if MagneticStripeReadBackMessageAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of MagneticStripeReadBackMessageAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MagneticStripeReadBackMessageAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Track1Base64 == input.Track1Base64 ||
                    (this.Track1Base64 != null &&
                    this.Track1Base64.Equals(input.Track1Base64))
                ) && 
                (
                    this.Track2Base64 == input.Track2Base64 ||
                    (this.Track2Base64 != null &&
                    this.Track2Base64.Equals(input.Track2Base64))
                ) && 
                (
                    this.Track3Base64 == input.Track3Base64 ||
                    (this.Track3Base64 != null &&
                    this.Track3Base64.Equals(input.Track3Base64))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Track1Base64 != null)
                {
                    hashCode = (hashCode * 59) + this.Track1Base64.GetHashCode();
                }
                if (this.Track2Base64 != null)
                {
                    hashCode = (hashCode * 59) + this.Track2Base64.GetHashCode();
                }
                if (this.Track3Base64 != null)
                {
                    hashCode = (hashCode * 59) + this.Track3Base64.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
