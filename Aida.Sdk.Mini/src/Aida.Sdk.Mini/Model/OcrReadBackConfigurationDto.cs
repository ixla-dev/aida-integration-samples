/*
 * aida-mini
 *
 * 1.0.543
 *
 * The version of the OpenAPI document: 1.0.543
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Mini.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Mini.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Mini.Model
{
    /// <summary>
    /// OcrReadBackConfigurationDto
    /// </summary>
    [DataContract(Name = "OcrReadBackConfigurationDto")]
    [JsonConverter(typeof(JsonSubtypes), "Discriminator")]
    [JsonSubtypes.KnownSubType(typeof(ChipReadBackConfigurationDto), "IXLA.Box.Automapper.ChipReadBackConfigurationDto")]
    [JsonSubtypes.KnownSubType(typeof(MagneticReadBackConfigurationDto), "IXLA.Box.Automapper.MagneticReadBackConfigurationDto")]
    [JsonSubtypes.KnownSubType(typeof(OcrReadBackConfigurationDto), "IXLA.Box.Automapper.OcrReadBackConfigurationDto")]
    public partial class OcrReadBackConfigurationDto : ReadBackConfigurationDto, IEquatable<OcrReadBackConfigurationDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OcrReadBackConfigurationDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OcrReadBackConfigurationDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OcrReadBackConfigurationDto" /> class.
        /// </summary>
        /// <param name="ocrSettingsId">ocrSettingsId.</param>
        /// <param name="discriminator">discriminator (required) (default to &quot;OcrReadBackConfigurationDto&quot;).</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="readBackType">readBackType.</param>
        /// <param name="requiredSide">requiredSide.</param>
        /// <param name="jobTemplateId">jobTemplateId.</param>
        public OcrReadBackConfigurationDto(int ocrSettingsId = default(int), string discriminator = "OcrReadBackConfigurationDto", int id = default(int), string name = default(string), ReadBackType? readBackType = default(ReadBackType?), SupportSide? requiredSide = default(SupportSide?), int jobTemplateId = default(int)) : base(discriminator, id, name, readBackType, requiredSide, jobTemplateId)
        {
            this.OcrSettingsId = ocrSettingsId;
        }

        /// <summary>
        /// Gets or Sets OcrSettingsId
        /// </summary>
        [DataMember(Name = "ocrSettingsId", EmitDefaultValue = false)]
        public int OcrSettingsId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OcrReadBackConfigurationDto {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  OcrSettingsId: ").Append(OcrSettingsId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OcrReadBackConfigurationDto);
        }

        /// <summary>
        /// Returns true if OcrReadBackConfigurationDto instances are equal
        /// </summary>
        /// <param name="input">Instance of OcrReadBackConfigurationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OcrReadBackConfigurationDto input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.OcrSettingsId == input.OcrSettingsId ||
                    this.OcrSettingsId.Equals(input.OcrSettingsId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.OcrSettingsId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
