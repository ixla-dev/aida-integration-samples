/*
 * aida-mini
 *
 * 1.3.5+5a9fb622482f18d24fc4f1b5ae8fe290f7c62728
 *
 * The version of the OpenAPI document: 1.3.5+5a9fb622482f18d24fc4f1b5ae8fe290f7c62728
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Mini.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Mini.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Mini.Model
{
    /// <summary>
    /// BarcodeReadSettingsDto
    /// </summary>
    [DataContract(Name = "BarcodeReadSettingsDto")]
    public partial class BarcodeReadSettingsDto : IEquatable<BarcodeReadSettingsDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", IsRequired = true, EmitDefaultValue = false)]
        public BarcodeFormat Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeReadSettingsDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BarcodeReadSettingsDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeReadSettingsDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="roi">roi (required).</param>
        /// <param name="format">format (required).</param>
        /// <param name="angle">angle (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="scannerId">scannerId (required).</param>
        /// <param name="cameraId">cameraId (required).</param>
        /// <param name="acquisitionPresetName">acquisitionPresetName (required).</param>
        /// <param name="canBeDeleted">canBeDeleted.</param>
        public BarcodeReadSettingsDto(int id = default(int), Rectangle roi = default(Rectangle), BarcodeFormat format = default(BarcodeFormat), float angle = default(float), string name = default(string), string scannerId = default(string), string cameraId = default(string), string acquisitionPresetName = default(string), bool canBeDeleted = default(bool))
        {
            this.Id = id;
            // to ensure "roi" is required (not null)
            if (roi == null)
            {
                throw new ArgumentNullException("roi is a required property for BarcodeReadSettingsDto and cannot be null");
            }
            this.Roi = roi;
            this.Format = format;
            this.Angle = angle;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for BarcodeReadSettingsDto and cannot be null");
            }
            this.Name = name;
            // to ensure "scannerId" is required (not null)
            if (scannerId == null)
            {
                throw new ArgumentNullException("scannerId is a required property for BarcodeReadSettingsDto and cannot be null");
            }
            this.ScannerId = scannerId;
            // to ensure "cameraId" is required (not null)
            if (cameraId == null)
            {
                throw new ArgumentNullException("cameraId is a required property for BarcodeReadSettingsDto and cannot be null");
            }
            this.CameraId = cameraId;
            // to ensure "acquisitionPresetName" is required (not null)
            if (acquisitionPresetName == null)
            {
                throw new ArgumentNullException("acquisitionPresetName is a required property for BarcodeReadSettingsDto and cannot be null");
            }
            this.AcquisitionPresetName = acquisitionPresetName;
            this.CanBeDeleted = canBeDeleted;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Roi
        /// </summary>
        [DataMember(Name = "roi", IsRequired = true, EmitDefaultValue = false)]
        public Rectangle Roi { get; set; }

        /// <summary>
        /// Gets or Sets Angle
        /// </summary>
        [DataMember(Name = "angle", IsRequired = true, EmitDefaultValue = false)]
        public float Angle { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ScannerId
        /// </summary>
        [DataMember(Name = "scannerId", IsRequired = true, EmitDefaultValue = true)]
        public string ScannerId { get; set; }

        /// <summary>
        /// Gets or Sets CameraId
        /// </summary>
        [DataMember(Name = "cameraId", IsRequired = true, EmitDefaultValue = true)]
        public string CameraId { get; set; }

        /// <summary>
        /// Gets or Sets AcquisitionPresetName
        /// </summary>
        [DataMember(Name = "acquisitionPresetName", IsRequired = true, EmitDefaultValue = true)]
        public string AcquisitionPresetName { get; set; }

        /// <summary>
        /// Gets or Sets CanBeDeleted
        /// </summary>
        [DataMember(Name = "canBeDeleted", EmitDefaultValue = true)]
        public bool CanBeDeleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BarcodeReadSettingsDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Roi: ").Append(Roi).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ScannerId: ").Append(ScannerId).Append("\n");
            sb.Append("  CameraId: ").Append(CameraId).Append("\n");
            sb.Append("  AcquisitionPresetName: ").Append(AcquisitionPresetName).Append("\n");
            sb.Append("  CanBeDeleted: ").Append(CanBeDeleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BarcodeReadSettingsDto);
        }

        /// <summary>
        /// Returns true if BarcodeReadSettingsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BarcodeReadSettingsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BarcodeReadSettingsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Roi == input.Roi ||
                    (this.Roi != null &&
                    this.Roi.Equals(input.Roi))
                ) && 
                (
                    this.Format == input.Format ||
                    this.Format.Equals(input.Format)
                ) && 
                (
                    this.Angle == input.Angle ||
                    this.Angle.Equals(input.Angle)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ScannerId == input.ScannerId ||
                    (this.ScannerId != null &&
                    this.ScannerId.Equals(input.ScannerId))
                ) && 
                (
                    this.CameraId == input.CameraId ||
                    (this.CameraId != null &&
                    this.CameraId.Equals(input.CameraId))
                ) && 
                (
                    this.AcquisitionPresetName == input.AcquisitionPresetName ||
                    (this.AcquisitionPresetName != null &&
                    this.AcquisitionPresetName.Equals(input.AcquisitionPresetName))
                ) && 
                (
                    this.CanBeDeleted == input.CanBeDeleted ||
                    this.CanBeDeleted.Equals(input.CanBeDeleted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Roi != null)
                {
                    hashCode = (hashCode * 59) + this.Roi.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Format.GetHashCode();
                hashCode = (hashCode * 59) + this.Angle.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ScannerId != null)
                {
                    hashCode = (hashCode * 59) + this.ScannerId.GetHashCode();
                }
                if (this.CameraId != null)
                {
                    hashCode = (hashCode * 59) + this.CameraId.GetHashCode();
                }
                if (this.AcquisitionPresetName != null)
                {
                    hashCode = (hashCode * 59) + this.AcquisitionPresetName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CanBeDeleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // ScannerId (string) maxLength
            if (this.ScannerId != null && this.ScannerId.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ScannerId, length must be less than 255.", new [] { "ScannerId" });
            }

            // CameraId (string) maxLength
            if (this.CameraId != null && this.CameraId.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CameraId, length must be less than 255.", new [] { "CameraId" });
            }

            // AcquisitionPresetName (string) maxLength
            if (this.AcquisitionPresetName != null && this.AcquisitionPresetName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcquisitionPresetName, length must be less than 255.", new [] { "AcquisitionPresetName" });
            }

            yield break;
        }
    }

}
