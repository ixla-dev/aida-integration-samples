/*
 * aida-mini
 *
 * 1.3.5+5a9fb622482f18d24fc4f1b5ae8fe290f7c62728
 *
 * The version of the OpenAPI document: 1.3.5+5a9fb622482f18d24fc4f1b5ae8fe290f7c62728
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Mini.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Mini.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Mini.Model
{
    /// <summary>
    /// BarcodeReadBackMessageAllOf
    /// </summary>
    [DataContract(Name = "BarcodeReadBackMessage_allOf")]
    public partial class BarcodeReadBackMessageAllOf : IEquatable<BarcodeReadBackMessageAllOf>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets BarcodeFormat
        /// </summary>
        [DataMember(Name = "barcodeFormat", EmitDefaultValue = false)]
        public BarcodeFormat? BarcodeFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeReadBackMessageAllOf" /> class.
        /// </summary>
        /// <param name="barcodeFormat">barcodeFormat.</param>
        /// <param name="decodedBytes">decodedBytes.</param>
        public BarcodeReadBackMessageAllOf(BarcodeFormat? barcodeFormat = default(BarcodeFormat?), byte[] decodedBytes = default(byte[]))
        {
            this.BarcodeFormat = barcodeFormat;
            this.DecodedBytes = decodedBytes;
        }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; private set; }

        /// <summary>
        /// Returns false as Text should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeText()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DecodedBytes
        /// </summary>
        [DataMember(Name = "decodedBytes", EmitDefaultValue = true)]
        public byte[] DecodedBytes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BarcodeReadBackMessageAllOf {\n");
            sb.Append("  BarcodeFormat: ").Append(BarcodeFormat).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  DecodedBytes: ").Append(DecodedBytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BarcodeReadBackMessageAllOf);
        }

        /// <summary>
        /// Returns true if BarcodeReadBackMessageAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of BarcodeReadBackMessageAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BarcodeReadBackMessageAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BarcodeFormat == input.BarcodeFormat ||
                    this.BarcodeFormat.Equals(input.BarcodeFormat)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.DecodedBytes == input.DecodedBytes ||
                    (this.DecodedBytes != null &&
                    this.DecodedBytes.Equals(input.DecodedBytes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BarcodeFormat.GetHashCode();
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.DecodedBytes != null)
                {
                    hashCode = (hashCode * 59) + this.DecodedBytes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
